Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

Approach:

The main assumption is that there is majority element in array. 

1. Create a count and result variable. Initialize it as 0
2. Iterate through input array
3. The moment count is set to 0 for current element, update the result to new element. 

Solution:
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        res, count = 0,0
        for i in nums:
            if count ==0:
                res = i
            count += (1 if res == i else -1)
        return res
        
Runtime: 447 ms, faster than 5.40% of Python3 online submissions for Majority Element.
Memory Usage: 15.6 MB, less than 34.28% of Python3 online submissions for Majority Element.
